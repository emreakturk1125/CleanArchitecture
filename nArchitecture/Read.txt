    ****************** ÖNEMLİ ************************

-> demoProjects içine yeni bir proje klasörü eklenecekse ""sağ tık"" > ""New Solution Folder""  yaplıdıktan sonra aynı path'e manuel olarakta aynı isimde klasör eklenmelidir.
-> Klasör içine eklencek class library     Sap Tık > Add > New Project  dedikten sonra   eklnecek path dikkate et çünkü başka yere ekliyor

 

-> DOMAIN DRIVEN DEVELOPMENT tekniğidir.

-> Clean Architecture (Onion Architecture (tasarım kalıbıdır.) referans alır. )
   
* Bu mimaride yazılım belirli katmanlara ayrılmıştır bunlar Domain, Application, Infrastructure ve Presentation‘dır.
  Avantajları;
* Framework bağımsız
* Test edilebilir (Test güdümlü bir yapıdır)
* Arayüz bağımsız
* Veritabanı bağımsız
  
-> Net Core 6.0

***********************  CQRS  *******************************

-> CQRS Mediatr alt yapısı ile kullandık

-> MediatR; Mediator pattern’inin kullanılmasını sağlayan bir kütüphanedir.
Biz örneğimizde bu kütüphaneyi CQRS pattern için, command query modelleri ve bu modelleri handle ederek işlemi gerçekleştirecek sınıflar arasındaki iletişimi,
loosely coupled olarak tek bir noktadan sağlamak için kullanacağız.

-> CQRS, özünde (Command Query Responsibility Segregation)‘ın kısaltılmış halidir.
Açılımından da anlaşılacağı üzere ‘Command’ ve ‘Query’ sorumluluklarının ayrılması prensibini esas alan bir yaklaşımı savunmaktadır. 

-> Mediator pattern’den de kısaca bahsedecek olursak; aynı arayüz üzerinden türeyen nesneler arasındaki iletişimi,
tek bir nokta üzerinden sağlamaya dayalı bir pattern’dir.İletişimi tek bir sınıf(Mediator) üzerinden sağladığı için gevşek bağlılık sağlar.


-> Commands
   Yeni bir veri eklemek ya da var olan veri üzerinde güncelleme yapmak için kullanılır. Örnek vermek gerekirse; Insert, Update, Delete. Geriye veri döndürmez. Örnek olarak;

-> Queries
   Veritabanından veri almak için kullanılır. Geriye sadece belirtilen modeli döner ve veri üzerinde herhangi bir değişiklik yapmaz. Oluşturacağımız Query’lerimiz genellikle ‘Get’ ön eki ile isimlendirilir. Örnek olarak;


-> CQRS Ne Zaman Kullanılmalı ?

Birbirinden ayrı sistemlerde olası bir servisin hata vermesi durumunda bu hatanın sistemin akışına olumsuz yönde etkisi olmuyorsa kullanılabilir.
Kompleks iş kurallarının olabileceği veya iş kurallarının sık sık değiştiği yapılarda kullanılabilir.
Yüksek veri trafiğinin olduğu sistemlerde kullanılabilir.

CQRS’i Ne Zaman Kullanmamalıyız ?
İş kurallarının basit ve çok değişmediği sistemlerde,
Basit CRUD işlemlerinin yapıldığı sistemlerde
CQRS kullanılması önerilmez.